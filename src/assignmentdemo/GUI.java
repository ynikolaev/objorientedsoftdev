/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assignmentdemo;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.*;

/**
 *
 * @author ynikolaev
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    //GUI contains 2 attributes String and String
    //1 String - what shortcut to open
    //2 String - what message to pass to another class
    public GUI(String state, String message) {
        initComponents();
        //hides label if there is no message
        if (message.equals("")) {
            jLabel2.setVisible(false);
        } else {
            //set label text to message content
            jLabel2.setText(message);
            jLabel2.setVisible(true);
        }
        //defines which tab to open when window appears
        if (state.equals("menu")) {
            jTabbedPane1.setSelectedIndex(0);
        } else if (state.equals("restaurant")) {
            jTabbedPane1.setSelectedIndex(1);
            jTabbedPane1MouseClicked(null);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jInternalFrame3 = new javax.swing.JInternalFrame();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jProgressBar2 = new javax.swing.JProgressBar();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jProgressBar3 = new javax.swing.JProgressBar();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jProgressBar4 = new javax.swing.JProgressBar();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(181, 135, 135));
        setForeground(new java.awt.Color(181, 135, 135));
        setLocation(new java.awt.Point(100, 100));
        setResizable(false);

        jTabbedPane1.setBackground(new java.awt.Color(203, 171, 171));
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTabbedPane1.setForeground(new java.awt.Color(132, 92, 92));
        jTabbedPane1.setAlignmentY(3.0F);
        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPane1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jTabbedPane1.setInheritsPopupMenu(true);
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(200, 160));
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jInternalFrame1.setBackground(new java.awt.Color(203, 171, 171));
        jInternalFrame1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jInternalFrame1.setVisible(true);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon("/Users/yannikolaev/Documents/University/MSc Computing/CO4403 Object-Oriented Software Development/AssignmentDemo/images/logo2.png")); // NOI18N

        jPanel4.setBackground(new java.awt.Color(237, 214, 214));

        jButton1.setBackground(new java.awt.Color(176, 128, 128));
        jButton1.setText("Add Restaurant");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(176, 128, 128));
        jButton4.setText("Exit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButton(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap(108, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(107, 107, 107))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(52, 52, 52))
        );

        jTabbedPane1.addTab("Menu", jInternalFrame1);

        jInternalFrame2.setBackground(new java.awt.Color(203, 171, 171));
        jInternalFrame2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jInternalFrame2.setMaximizable(true);
        jInternalFrame2.setTitle("City Guide");
        jInternalFrame2.setVisible(true);

        jLabel1.setBackground(new java.awt.Color(203, 171, 171));
        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 36)); // NOI18N
        jLabel1.setText("RESTAURANTS");

        jComboBox1.setBackground(new java.awt.Color(237, 214, 214));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Title", "Location", "Type", "Rating" }));

        jPanel1.setBackground(new java.awt.Color(203, 171, 171));
        jPanel1.setForeground(new java.awt.Color(132, 92, 92));

        jButton2.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jButton2.setText("Clear");
        buttonGroup1.add(jButton2);
        jButton2.setIconTextGap(1);
        jButton2.setMaximumSize(new java.awt.Dimension(100, 40));
        jButton2.setMinimumSize(new java.awt.Dimension(100, 40));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jButton3.setText("Search");
        buttonGroup1.add(jButton3);
        jButton3.setMaximumSize(new java.awt.Dimension(100, 40));
        jButton3.setMinimumSize(new java.awt.Dimension(100, 40));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGoClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setBackground(new java.awt.Color(237, 214, 214));

        jScrollPane1.setBackground(new java.awt.Color(203, 171, 171));
        jScrollPane1.setForeground(new java.awt.Color(132, 92, 92));

        jTable1.setRowHeight(50);
        JTableHeader header = jTable1.getTableHeader();
        header.setBackground(new Color(203, 171, 171));
        header.setForeground(new Color(0, 0, 0));
        jTable1.setBackground(new java.awt.Color(203, 171, 171));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
            }
        ){
            @Override
            public Class<?> getColumnClass(int column) {
                switch (column) {
                    case 4: return ImageIcon.class;
                    default: return String.class;
                }
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 3 || column==4 || column==5 ? true : false;
            }

            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            /*public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }*/
        });
        jTable1.setGridColor(new java.awt.Color(203, 171, 171));
        jTable1.setSelectionBackground(new java.awt.Color(132, 92, 92));
        jTable1.setSelectionForeground(new java.awt.Color(248, 227, 227));
        jTable1.setShowGrid(false);
        jTable1.setShowHorizontalLines(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        //Previously was specified inside a listener
        //which led me to an error after multiple invokes
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        model.addColumn("ID");
        model.addColumn("Title");
        model.addColumn("Location");
        model.addColumn("Type");
        model.addColumn("Rating (Average)");

        TableColumnModel tcm = jTable1.getColumnModel();
        tcm.removeColumn(tcm.getColumn(0));
        //tcm.removeColumn(tcm.getColumn(4));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 153, 0));

        javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                        .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1))
                            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jLabel2)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)))
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        jTabbedPane1.addTab("Restaurants", jInternalFrame2);

        jInternalFrame3.setBackground(new java.awt.Color(203, 171, 171));
        jInternalFrame3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jInternalFrame3.setVisible(true);

        jPanel2.setBackground(new java.awt.Color(203, 171, 171));
        jPanel2.setForeground(new java.awt.Color(132, 92, 92));

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel4.setText("Average Rating");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel5.setText("European Restaurants:");

        jProgressBar1.setBackground(new Color(132, 92, 92));
        jProgressBar1.setForeground(new Color(132, 92, 92));
        jProgressBar1.setMaximum(5);

        jLabel6.setText("jLabel6");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel7.setText("Mexican Restaurants:");

        jLabel8.setText("jLabel8");

        jProgressBar2.setBackground(new java.awt.Color(203, 171, 171));
        jProgressBar2.setForeground(new java.awt.Color(132, 92, 92));
        jProgressBar2.setMaximum(5);

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel9.setText("Japanese Restaurants:");

        jLabel10.setText("jLabel10");

        jProgressBar3.setMaximum(5);

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel11.setText("Russian Restaurants:");

        jLabel12.setText("jLabel12");

        jProgressBar4.setMaximum(5);

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel13.setText("jLabel13");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(jLabel4))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel11)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel12))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel10))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel6))
                                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel8))
                                .addComponent(jProgressBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jProgressBar3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jProgressBar4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(161, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel13)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jInternalFrame3Layout = new javax.swing.GroupLayout(jInternalFrame3.getContentPane());
        jInternalFrame3.getContentPane().setLayout(jInternalFrame3Layout);
        jInternalFrame3Layout.setHorizontalGroup(
            jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jInternalFrame3Layout.setVerticalGroup(
            jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Statistics", jInternalFrame3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Search button
    private void buttonGoClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGoClicked
        jTable1.setVisible(true);
        jScrollPane1.setVisible(true);
        //counts SQL tries
        int count = 0;
        //icon initialisation
        ImageIcon icon = new ImageIcon("images/0.png");
        //table model initialization
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        //set rows to zero before table content appears
        model.setRowCount(0);
        //opens connection
        Connection conn = null;
        try {
            Class.forName("org.sqlite.JDBC");
            //opens database files
            conn = DriverManager.getConnection("jdbc:sqlite:Restaurants.db");
            Statement stmt = conn.createStatement();
            //user's search input holder
            String search = jTextField2.getText();
            //user's search category holder
            String selected_category = jComboBox1.getItemAt(jComboBox1.getSelectedIndex()).toLowerCase();
            //strings for queries
            String userQuery = "";
            String withoutRev = "";
            boolean more;
            ResultSet rs;
            //search in title and location category using SQL LIKE attribute
            if (selected_category.equals("title") || selected_category.equals("location")) {
                //search within restaurants with review
                userQuery = "SELECT Restaurants.rest_id, title, location, type, picture, ROUND(AVG([rating]),0) AS rating\n"
                        + "FROM Restaurants, Reviews\n"
                        + "WHERE Restaurants.rest_id = Reviews.rest_id\n"
                        + "AND " + selected_category + " LIKE '%" + search + "%'\n"
                        + "GROUP BY Restaurants.rest_id";
                //search within restaurants without review
                withoutRev = "SELECT rest_id, title, location, type, picture\n"
                        + "  FROM Restaurants\n"
                        + " WHERE Restaurants.rest_id NOT IN (SELECT rest_id\n"
                        + "FROM Reviews\n"
                        + "GROUP BY rest_id)\n"
                        + "AND " + selected_category + " LIKE '%" + search + "%'\n"
                        + "GROUP BY rest_id";
                //search in type using exact match    
            } else if (selected_category.equals("type")) {
                //search within restaurants with review
                userQuery = "SELECT Restaurants.rest_id, title, location, type, picture, ROUND(AVG([rating]),0) AS rating\n"
                        + "FROM Restaurants, Reviews\n"
                        + "WHERE Restaurants.rest_id = Reviews.rest_id\n"
                        + "AND " + selected_category + " = '" + search + "'\n"
                        + "GROUP BY Restaurants.rest_id";
                //search within restaurants without review
                withoutRev = "SELECT rest_id, title, location, type, picture\n"
                        + "  FROM Restaurants\n"
                        + " WHERE Restaurants.rest_id NOT IN (SELECT rest_id\n"
                        + "FROM Reviews\n"
                        + "GROUP BY rest_id)\n"
                        + "AND " + selected_category + " = '" + search + "'\n"
                        + "GROUP BY rest_id";
            } else if (selected_category.equals("rating")) {
                if (search.equals("0")) {
                    //search within restaurants without review
                    userQuery = "SELECT rest_id, title, location, type, picture, picture\n"
                            + "  FROM Restaurants\n"
                            + " WHERE Restaurants.rest_id NOT IN (SELECT rest_id\n"
                            + "FROM Reviews\n"
                            + "GROUP BY rest_id)\n"
                            + "GROUP BY rest_id";
                } else {
                    //search within restaurants with review
                    userQuery = "SELECT rest_id, title, location, type, picture, AVG_RATE\n"
                            + "FROM (select Restaurants.rest_id, title, location, type, picture, ROUND(AVG([rating]),0) AS AVG_RATE \n"
                            + "FROM Restaurants, Reviews\n"
                            + "WHERE Restaurants.rest_id = Reviews.rest_id\n"
                            + "GROUP BY Restaurants.rest_id)\n"
                            + "WHERE AVG_RATE = " + search + "";
                }
                withoutRev = "";
                //System.out.println(userQuery);
            }
            //if text field is empty, reloads page
            String query = "";
            if (search.trim().equals("")) {
                jButton2ActionPerformed(evt);
                String message = "Failure\n"
                        + "Please enter a search string";
                JOptionPane.showMessageDialog(new JFrame(), message, "Search Error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                //first attempt of searching within restaurants with reviews
                query = userQuery;
                stmt.execute(query);
                rs = stmt.executeQuery(query);
                more = rs.next();
                if (!more) {
                    //second attempt of searching within restaurants without reviews
                    if (selected_category.equals("rating")) {
                        jButton2ActionPerformed(evt);
                        String message = "Oops!\n"
                                + "Your request had not been found\n"
                                + "Try again!";
                        JOptionPane.showMessageDialog(new JFrame(), message, "Search Error",
                                JOptionPane.ERROR_MESSAGE);
                    } else {
                        count++;
                        if (!withoutRev.equals("")) {
                            query = withoutRev;
                            ResultSet rs2 = stmt.executeQuery(query);
                            more = rs2.next();
                            if (!more) {
                                count++;
                                System.out.println("All with reviews");
                            } else {
                                System.out.println("Some without reviews");
                                while (more) {
                                    //corresponding icon for zero average
                                    icon = new ImageIcon("images/0.png");
                                    //adds SQL results to the table
                                    String cap = rs.getString(4).substring(0, 1).toUpperCase() + rs.getString(4).substring(1);
                                    model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), cap, icon});
                                    more = rs.next();
                                }
                            }
                        } else {
                            System.out.println("All with reviews");
                        }
                    }
                } else {
                    //gets average ating of reviews for each restaurants
                    while (more) { //with a corresponding icon
                        if (rs.getString(6).equals("1.0")) {
                            icon = new ImageIcon("images/1.png");
                        } else if (rs.getString(6).equals("2.0")) {
                            icon = new ImageIcon("images/2.png");
                        } else if (rs.getString(6).equals("3.0")) {
                            icon = new ImageIcon("images/3.png");
                        } else if (rs.getString(6).equals("4.0")) {
                            icon = new ImageIcon("images/4.png");
                        } else if (rs.getString(6).equals("5.0")) {
                            icon = new ImageIcon("images/5.png");
                        }
                        //adds SQL results to the table
                        String cap = rs.getString(4).substring(0, 1).toUpperCase() + rs.getString(4).substring(1);
                        model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), cap, icon, rs.getString(6)});
                        more = rs.next();
                    }
                }
                // WHEN WITH OR WITHOUT REVIEW RECORDS ARENT FOUND
                System.out.println("Count: " + count);
                if (count == 2) {
                    jButton2ActionPerformed(evt);
                    String message = "No Results!\n"
                            + "Your request had not been found\n"
                            + "Try again!";
                    JOptionPane.showMessageDialog(new JFrame(), message, "Search Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        } finally {
            try {
                conn.close();
            } catch (Exception ex) {
                ex.printStackTrace(System.err);
            }
        }
    }//GEN-LAST:event_buttonGoClicked

    //Select tabs/click tabs
    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        jTable1.setVisible(true);
        jScrollPane1.setVisible(true);

        //STATISTIC REFRESHER
        Restaurant stat_all = new Restaurant();
        int all_count = stat_all.count_rev();
        jLabel13.setText("(Total Reviews: " + all_count + ")");
        //EUROPEAN
        Restaurant stat_eu = new European();
        int eur_stat = stat_eu.stat_Avg();
        jProgressBar1.setValue(eur_stat);
        int eur_count = stat_eu.count_rev();
        jLabel6.setText("(Total reviews: " + eur_count + ") AVG: " + eur_stat);
        //MEXICAN
        Restaurant stat_mex = new Mexican();
        int mex_stat = stat_mex.stat_Avg();
        jProgressBar2.setValue(mex_stat);
        int mex_count = stat_mex.count_rev();
        jLabel8.setText("(Total reviews: " + mex_count + ") AVG: " + mex_stat);
        //JAPANESE
        Restaurant stat_jap = new Japanese();
        int jap_stat = stat_jap.stat_Avg();
        jProgressBar3.setValue(jap_stat);
        int jap_count = stat_jap.count_rev();
        jLabel10.setText("(Total reviews: " + jap_count + ") AVG: " + jap_stat);
        //RUSSIAN
        Restaurant stat_rus = new Russian();
        int rus_stat = stat_rus.stat_Avg();
        jProgressBar4.setValue(rus_stat);
        int rus_count = stat_rus.count_rev();
        jLabel12.setText("(Total reviews: " + rus_count + ") AVG: " + rus_stat);

        //RESTAURANT PAGE REFRESHER
        //initialize icon
        ImageIcon icon = new ImageIcon("images/0.png");
        //initialize table model
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        //set table rows to zero, before adding the content
        model.setRowCount(0);
        //sets search text field to empty
        jTextField2.setText("");
        //starts connection
        Connection conn = null;
        try {
            Class.forName("org.sqlite.JDBC");
            //opens database file
            conn = DriverManager.getConnection("jdbc:sqlite:Restaurants.db");
            //creates statement
            Statement stmt = conn.createStatement();
            String query = jTextField2.getText();
            //calls method to count all reviews
            Restaurant count = new Restaurant();
            int rev_num = count.count_rev();
            //if there are no revies, it adds to the table only restaurants
            if (rev_num == 0) {
                query = "SELECT rest_id, title, location, type, picture\n"
                        + "  FROM Restaurants\n"
                        + "GROUP BY rest_id";
                ResultSet rs2 = stmt.executeQuery(query);
                boolean more = rs2.next();
                if (!more) {
                    System.out.println("All with reviews");
                } else {
                    System.out.println("Some without reviews");
                    while (more) {
                        icon = new ImageIcon("images/0.png");
                        //adds results to the table
                        String cap = rs2.getString(4).substring(0, 1).toUpperCase() + rs2.getString(4).substring(1);
                        model.addRow(new Object[]{rs2.getString(1), rs2.getString(2), rs2.getString(3), cap, icon});
                        more = rs2.next();
                    }
                }
                //otherwise, it adds firstle restaurants with reviews,
                //after that restaurants without review    
            } else {
                //select restaurants with reviews
                query = "SELECT Restaurants.rest_id, title, location, type, picture, ROUND(AVG([rating]),0) AS rating\n"
                        + "FROM Restaurants, Reviews\n"
                        + "WHERE Restaurants.rest_id = Reviews.rest_id\n"
                        + "GROUP BY Restaurants.rest_id";
                ResultSet rs = stmt.executeQuery(query);
                boolean more = rs.next();
                if (!more) {
                    jTable1.setVisible(false);
                    jScrollPane1.setVisible(false);
                } else {
                    while (more) {
                        if (rs.getString(6).equals("1.0")) {
                            icon = new ImageIcon("images/1.png");
                        } else if (rs.getString(6).equals("2.0")) {
                            icon = new ImageIcon("images/2.png");
                        } else if (rs.getString(6).equals("3.0")) {
                            icon = new ImageIcon("images/3.png");
                        } else if (rs.getString(6).equals("4.0")) {
                            icon = new ImageIcon("images/4.png");
                        } else if (rs.getString(6).equals("5.0")) {
                            icon = new ImageIcon("images/5.png");
                        }
                        //adds results to the table
                        String cap = rs.getString(4).substring(0, 1).toUpperCase() + rs.getString(4).substring(1);
                        model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), cap, icon});
                        more = rs.next();
                    }
                }
                //select restaurants without reviews
                query = "SELECT rest_id, title, location, type, picture\n"
                        + "  FROM Restaurants\n"
                        + " WHERE Restaurants.rest_id NOT IN (SELECT rest_id\n"
                        + "FROM Reviews\n"
                        + "GROUP BY rest_id)\n"
                        + "GROUP BY rest_id";
                ResultSet rs2 = stmt.executeQuery(query);
                more = rs2.next();
                if (!more) {
                    System.out.println("All with reviews");
                } else {
                    System.out.println("Some without reviews");
                    while (more) {
                        icon = new ImageIcon("images/0.png");
                        //adds results to the table
                        String cap = rs.getString(4).substring(0, 1).toUpperCase() + rs.getString(4).substring(1);
                        model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), cap, icon});
                        more = rs.next();
                    }
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        } finally {
            try {
                conn.close();
            } catch (Exception ex) {
                ex.printStackTrace(System.err);
            }
        }
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    //Clear Button
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jTable1.setVisible(true);
        jScrollPane1.setVisible(true);
        //initialize icon
        ImageIcon icon = new ImageIcon("images/0.png");
        //initialize table model
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        //set table rows to zero, before adding the content
        model.setRowCount(0);
        //sets search text field to empty
        jTextField2.setText("");
        model.setRowCount(0);
        //opens connection
        Connection conn = null;
        try {
            Class.forName("org.sqlite.JDBC");
            //opens database file
            conn = DriverManager.getConnection("jdbc:sqlite:Restaurants.db");
            Statement stmt = conn.createStatement();
            String query = jTextField2.getText();
            //counts all reviews
            Restaurant count = new Restaurant();
            int rev_num = count.count_rev();
            //if there are no revies, it adds to the table only restaurants
            if (rev_num == 0) {
                //select restaurants with reviews
                query = "SELECT rest_id, title, location, type, picture\n"
                        + "  FROM Restaurants\n"
                        + "GROUP BY rest_id";
                ResultSet rs2 = stmt.executeQuery(query);
                boolean more = rs2.next();
                if (!more) {
                    System.out.println("All with reviews");
                } else {
                    System.out.println("Some without reviews");
                    while (more) {
                        icon = new ImageIcon("images/0.png");
                        //adds results to the table
                        String cap = rs2.getString(4).substring(0, 1).toUpperCase() + rs2.getString(4).substring(1);
                        model.addRow(new Object[]{rs2.getString(1), rs2.getString(2), rs2.getString(3), cap, icon});
                        more = rs2.next();
                    }
                }
            } else {
                //otherwise, it adds firstle restaurants with reviews,
                //after that restaurants without review
                query = "SELECT Restaurants.rest_id, title, location, type, picture, ROUND(AVG([rating]),0) AS rating\n"
                        + "FROM Restaurants, Reviews\n"
                        + "WHERE Restaurants.rest_id = Reviews.rest_id\n"
                        + "GROUP BY Restaurants.rest_id";
                ResultSet rs = stmt.executeQuery(query);
                boolean more = rs.next();
                if (!more) {
                    jTable1.setVisible(false);
                    jScrollPane1.setVisible(false);
                } else {
                    while (more) {
                        if (rs.getString(6).equals("1.0")) {
                            icon = new ImageIcon("images/1.png");
                        } else if (rs.getString(6).equals("2.0")) {
                            icon = new ImageIcon("images/2.png");
                        } else if (rs.getString(6).equals("3.0")) {
                            icon = new ImageIcon("images/3.png");
                        } else if (rs.getString(6).equals("4.0")) {
                            icon = new ImageIcon("images/4.png");
                        } else if (rs.getString(6).equals("5.0")) {
                            icon = new ImageIcon("images/5.png");
                        }
                        //adds results to the table
                        String cap = rs.getString(4).substring(0, 1).toUpperCase() + rs.getString(4).substring(1);
                        model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), cap, icon});
                        more = rs.next();
                    }
                }
                //select restaurants without reviews
                query = "SELECT rest_id, title, location, type, picture\n"
                        + "  FROM Restaurants\n"
                        + " WHERE Restaurants.rest_id NOT IN (SELECT rest_id\n"
                        + "FROM Reviews\n"
                        + "GROUP BY rest_id)\n"
                        + "GROUP BY rest_id";
                ResultSet rs2 = stmt.executeQuery(query);
                more = rs2.next();
                if (!more) {
                    System.out.println("All with reviews");
                } else {
                    System.out.println("Some without reviews");
                    while (more) {
                        icon = new ImageIcon("images/0.png");
                        //System.out.println(rs.getString(6));
                        String cap = rs.getString(4).substring(0, 1).toUpperCase() + rs.getString(4).substring(1);
                        model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), cap, icon});
                        more = rs.next();
                    }
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        } finally {
            try {
                conn.close();
            } catch (Exception ex) {
                ex.printStackTrace(System.err);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    //Add Review Button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
        new AddRest().setVisible(true);

    }//GEN-LAST:event_jButton1ActionPerformed

    //Select row in the table
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //defines table model
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        //takes all elements oа the row
        String selection = model.getDataVector().elementAt(jTable1.getSelectedRow()).toString();
        //split section into parts
        String[] parts = selection.split(", ");
        String part1 = parts[0];
        //convert needed string part to integer
        int row_id = Integer.parseInt(part1.substring(1) + "");
        //close window
        dispose();
        //open reviews page with according restaurant id = row id
        new Reviews(row_id).setVisible(true);
    }//GEN-LAST:event_jTable1MouseClicked

    //Exit button
    private void ExitButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButton
        System.exit(0);
    }//GEN-LAST:event_ExitButton

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI("menu", "").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JInternalFrame jInternalFrame3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JProgressBar jProgressBar3;
    private javax.swing.JProgressBar jProgressBar4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

}
